#!/usr/bin/env python3

def create_internal_world(world_info, filename):
    fout = open(filename, 'w')

    # Find the first region that contains the robot's point
    start_loc = "wp" + next( (region.soar_id for region in world_info.regions 
        if region.contains_point(world_info.robot.x, world_info.robot.y)), "01")

    # Write the start of the rule
    fout.write("### Autogenerated world file from create_internal_world.py\n")
    fout.write("### Used to test actions in a simulated world\n")
    fout.write("\n")
    fout.write("sp {top-state*domain*internal*elaborate*internal-world*" + world_info.name + "\n")
    fout.write("   (state <s> ^superstate nil\n")
    fout.write("              ^agent-params.simulate-perception true)\n")
    fout.write("-->\n")
    fout.write("   (<s> ^internal-world <w>)\n")
    fout.write("   (<w> ^current-waypoint " + start_loc + "\n")
    fout.write("        ^holding-object none\n")
    fout.write("        ^objects <objs>)\n")
    fout.write("\n")

    name_counts = {}

    # Write the list of objects
    for obj in world_info.objects:
        obj_id = "<obj" + str(obj.obj_id) + ">"
        preds_id = "<obj" + str(obj.obj_id) + "-preds>"

        # Create a unique handle for the object
        handle = "obj"
        for c in range(len(obj.cats)):
            if obj.cats[c] == "name" or obj.cats[c] == "shape":
                handle = obj.labels[c]
        
        if handle not in name_counts:
            name_counts[handle] = 0
        name_counts[handle] += 1
        handle += "_" + str(name_counts[handle])

        # Determine the object's location
        obj_loc = next( (region for region in world_info.regions 
            if region.contains_point(obj.vals[0], obj.vals[1])), None)

        fout.write("   (<objs> ^object {:s})\n".format(obj_id))
        fout.write("   ({:s} ^handle {:s} ^waypoint wp{:s} ^predicates {:s})\n".format(obj_id, handle, obj_loc.soar_id, preds_id))
        fout.write("   ({:s} {:s})\n".format(preds_id, " ".join([ "^{:s} {:s}".format(obj.cats[c], obj.labels[c]) for c in range(len(obj.cats))])))
        
        fout.write("\n")
    # End of writing objects

    fout.write("}\n")

    fout.close()

